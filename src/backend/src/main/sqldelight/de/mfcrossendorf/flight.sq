-- flight table, which contains a flight log for one specific
-- user in a specific time period
CREATE TABLE flight (
  flight_id         INT                    NOT NULL PRIMARY KEY
    GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
  account_id        INT                    NOT NULL REFERENCES account (account_id),
  date              DATE                   NOT NULL,
  flight_start      TIME WITHOUT TIME ZONE NOT NULL,
  flight_end        TIME WITHOUT TIME ZONE NULL,
  checked_first_aid BOOLEAN                NOT NULL,
  remarks           TEXT                   NULL,
  model_type        TEXT                   NOT NULL,
  model             INT                    NULL REFERENCES model (model_id),
  signature         BYTEA                  NOT NULL
);


-- Indexes --

CREATE INDEX flight_accountId_idx ON flight (account_id);
CREATE INDEX flight_date_idx ON flight (date);


-- Queries --

getFlights:
SELECT * FROM flight
ORDER BY date DESC, flight_start DESC;

getFlight:
SELECT * FROM flight WHERE flight_id = ?;

createFlight:
INSERT INTO flight VALUES (DEFAULT, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING flight_id;

getFlightsByAccountId:
SELECT flight.*, account.first_name, account.last_name FROM flight
JOIN account ON flight.account_id = account.account_id
WHERE flight.account_id = :accountId AND
      date >= :startDate AND
      date <= :endDate
ORDER BY date DESC, flight_start DESC;

getActiveFlights:
SELECT flight.*, account.first_name, account.last_name FROM flight
JOIN account ON flight.account_id = account.account_id
WHERE
  (flight_end IS NULL OR flight_end > :currentTime) AND
  date = :date
ORDER BY flight_start DESC;

getOpenFlightByAccountId:
SELECT flight.*, account.first_name, account.last_name FROM flight
JOIN account ON flight.account_id = account.account_id
WHERE flight.account_id = :accountId AND flight_end IS NULL AND date = :date
ORDER BY flight_start DESC
LIMIT 1;

getCompletedFlights:
SELECT flight.*, account.first_name, account.last_name FROM flight
JOIN account ON flight.account_id = account.account_id
WHERE
  (flight_end IS NOT NULL AND flight_end < :currentTime) AND
  date = :date
ORDER BY flight_start DESC;

getActivePilots:
SELECT account_id FROM flight
WHERE (flight_end IS NULL OR flight_end > :currentTime) AND date = :date;

getOpenPilots:
SELECT account_id FROM flight
WHERE flight_end IS NULL AND date = :date;

completeFlight:
UPDATE flight SET flight_end = :flightEnd, remarks = :remarks
WHERE flight_id = :flightId AND account_id = :accountId
RETURNING flight_id;

countByAccountId:
SELECT COUNT(*) FROM flight WHERE account_id = :accountId;

deleteFlight:
DELETE FROM flight WHERE flight_id = ?;
